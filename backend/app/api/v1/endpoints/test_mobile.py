from fastapi import APIRouter
from fastapi.responses import HTMLResponse

router = APIRouter()

@router.get("/mobile-test", response_class=HTMLResponse)
def mobile_test():
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    """
    html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß™ –¢–µ—Å—Ç API (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø)</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 400px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        button {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        .result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            white-space: pre-wrap;
            font-family: monospace;
            font-size: 12px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
        }
        .success { background-color: #d4edda; border-color: #c3e6cb; }
        .error { background-color: #f8d7da; border-color: #f5c6cb; }
        .info { background-color: #d1ecf1; border-color: #bee5eb; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ –¢–µ—Å—Ç API (Backend)</h1>
        
        <button onclick="showInfo()">–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</button>
        <button onclick="testAPI()">–¢–µ—Å—Ç API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</button>
        <button onclick="testProfileAPI()">–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è</button>
        <button onclick="clearResult()">–û—á–∏—Å—Ç–∏—Ç—å</button>
        
        <div id="result" class="result" style="display: none;"></div>
    </div>

    <script>
        let authToken = null;
        
        function showResult(message, type = 'info') {
            const resultDiv = document.getElementById('result');
            resultDiv.textContent = message;
            resultDiv.className = `result ${type}`;
            resultDiv.style.display = 'block';
        }
        
        function clearResult() {
            document.getElementById('result').style.display = 'none';
        }
        
        function showInfo() {
            const info = `
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–µ—Ä–µ–∑ Backend (–ø–æ—Ä—Ç 8000):
==========================================
URL: ${window.location.href}
–ü—Ä–æ—Ç–æ–∫–æ–ª: ${window.location.protocol}
–•–æ—Å—Ç: ${window.location.hostname}
–ü–æ—Ä—Ç: ${window.location.port || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}
User Agent: ${navigator.userAgent}
–í—Ä–µ–º—è: ${new Date().toLocaleString()}

–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Backend API.
–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É - –∑–Ω–∞—á–∏—Ç API –¥–æ—Å—Ç—É–ø–µ–Ω!

–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
- Email: valet@test.com
- –ü–∞—Ä–æ–ª—å: valet123
            `.trim();
            showResult(info, 'info');
        }
        
        async function testAPI() {
            try {
                showResult('–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...', 'info');
                
                const response = await fetch('/api/v1/valet-auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: 'valet@test.com',
                        password: 'valet123'
                    })
                });
                
                const responseText = await response.text();
                
                if (response.ok) {
                    const data = JSON.parse(responseText);
                    authToken = data.access_token;
                    showResult(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
–°—Ç–∞—Ç—É—Å: ${response.status}
–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${authToken ? '–î–∞' : '–ù–µ—Ç'}
–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:
${JSON.stringify(data, null, 2)}`, 'success');
                } else {
                    showResult(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
–°—Ç–∞—Ç—É—Å: ${response.status}
–û—Ç–≤–µ—Ç: ${responseText}`, 'error');
                }
            } catch (error) {
                showResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
–û—à–∏–±–∫–∞: ${error.message}
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.`, 'error');
            }
        }
        
        async function testProfileAPI() {
            if (!authToken) {
                showResult('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!', 'error');
                return;
            }
            
            try {
                showResult('–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'info');
                
                const response = await fetch('/api/v1/valet-auth/profile', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json',
                    }
                });
                
                const responseText = await response.text();
                
                if (response.ok) {
                    const data = JSON.parse(responseText);
                    showResult(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω!
–°—Ç–∞—Ç—É—Å: ${response.status}
–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:
${JSON.stringify(data, null, 2)}`, 'success');
                } else {
                    showResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!
–°—Ç–∞—Ç—É—Å: ${response.status}
–û—Ç–≤–µ—Ç: ${responseText}`, 'error');
                }
            } catch (error) {
                showResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è!
–û—à–∏–±–∫–∞: ${error.message}`, 'error');
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.onload = function() {
            showInfo();
        };
    </script>
</body>
</html>
    """
    return HTMLResponse(content=html_content, status_code=200) 